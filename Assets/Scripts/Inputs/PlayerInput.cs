//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scenes/Scripts/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable {
    public InputActionAsset asset { get; }
    public @PlayerInput() {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Combat"",
            ""id"": ""c33b003a-6213-4328-a08c-1a135e4e1917"",
            ""actions"": [
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""f14ef7f6-46fe-4fce-8213-7a6459ace52f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""fe3a109f-672a-47fc-a9de-024d510ba7b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpInput"",
                    ""type"": ""Button"",
                    ""id"": ""9b1b21de-db94-4f7a-b3c1-52f0e9ee520b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""892eb6cb-24f0-44a3-8b96-8c3c4b91790e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cd850bd3-47a5-4812-8f12-bb141513d28e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62c09d9f-9f02-4973-ab80-ef7e43c6e821"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02dbf375-c17f-4f4a-8e3e-b3c121305cb5"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""854e2ec1-79ce-4d84-abbd-99ac50ef9db7"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_Right = m_Combat.FindAction("Right", throwIfNotFound: true);
        m_Combat_Left = m_Combat.FindAction("Left", throwIfNotFound: true);
        m_Combat_JumpInput = m_Combat.FindAction("JumpInput", throwIfNotFound: true);
        m_Combat_Down = m_Combat.FindAction("Down", throwIfNotFound: true);
    }

    public void Dispose() {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action) {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator() {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator() {
        return GetEnumerator();
    }

    public void Enable() {
        asset.Enable();
    }

    public void Disable() {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false) {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action) {
        return asset.FindBinding(bindingMask, out action);
    }

    // Combat
    private readonly InputActionMap m_Combat;
    private ICombatActions m_CombatActionsCallbackInterface;
    private readonly InputAction m_Combat_Right;
    private readonly InputAction m_Combat_Left;
    private readonly InputAction m_Combat_JumpInput;
    private readonly InputAction m_Combat_Down;
    public struct CombatActions {
        private @PlayerInput m_Wrapper;
        public CombatActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Right => m_Wrapper.m_Combat_Right;
        public InputAction @Left => m_Wrapper.m_Combat_Left;
        public InputAction @JumpInput => m_Wrapper.m_Combat_JumpInput;
        public InputAction @Down => m_Wrapper.m_Combat_Down;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void SetCallbacks(ICombatActions instance) {
            if (m_Wrapper.m_CombatActionsCallbackInterface != null) {
                @Right.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnRight;
                @Left.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnLeft;
                @JumpInput.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnJumpInput;
                @JumpInput.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnJumpInput;
                @JumpInput.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnJumpInput;
                @Down.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnDown;
            }
            m_Wrapper.m_CombatActionsCallbackInterface = instance;
            if (instance != null) {
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @JumpInput.started += instance.OnJumpInput;
                @JumpInput.performed += instance.OnJumpInput;
                @JumpInput.canceled += instance.OnJumpInput;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
            }
        }
    }
    public CombatActions @Combat => new CombatActions(this);
    public interface ICombatActions {
        void OnRight(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnJumpInput(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
    }
}
